buildscript {
    ext.cubaVersion = '6.9.5'
    repositories {

        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
    }
}

def globalModule = project(':dashboard-global')
def coreModule = project(':dashboard-core')
def guiModule = project(':dashboard-gui')
def webModule = project(':dashboard-web')
def webThemesModule = project(':dashboard-web-themes')

def servletApi = 'org.apache.tomcat:tomcat-servlet-api:8.0.26'


apply(plugin: 'idea')
apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'com.haulmont.addon.dashboard'
        version = '2.0'
        isSnapshot = true
    }
    tomcat {
        dir = "$project.rootDir/build/tomcat"
    }
    ide {
        copyright = '''Copyright (c) 2016-$today.year Haulmont. All rights reserved.'''
        // Copyright Notice for IDEA project
        vcs = 'Git'
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
    appComponent("com.haulmont.addon.dnd:cuba-dnd-global:1.3.0")
}

def hsql = 'org.hsqldb:hsqldb:2.2.9'

def dbNameParam = 'dashboard'
def dbTestNameParam = 'dashboard-test'

configure([globalModule, coreModule, guiModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'idea')
    apply(plugin: 'cuba')
    apply(plugin: 'groovy')
    apply(plugin: 'checkstyle')

    sourceSets {
        test {
            groovy {
                srcDirs = ['test']
            }
        }
    }

    dependencies {
        compile('org.codehaus.groovy:groovy-all:2.4.11')
        testCompile('junit:junit:4.12')
        testCompile 'org.spockframework:spock-core:1.1-groovy-2.4-rc-3'
        compile('org.javatuples:javatuples:1.2')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    String checkstyleConfigDir = "${rootProject.projectDir}/config/checkstyle"
    checkstyle {
        toolVersion = "6.2"
        configFile = new File("${checkstyleConfigDir}/checkstyle.xml".toString())
        configProperties = [
                'checkstyleConfigDir': checkstyleConfigDir
        ]
        reportsDir = new File("${buildDir}/checkstyle".toString())
        ignoreFailures = false
    }

    checkstyleMain << {
        def checkstyleDir = "${project.buildDir}/checkstyle".toString()
        ant.xslt('in': "$checkstyleDir/main.xml",
                out: "$checkstyleDir/$project.name-checkstyle.html",
                style: "$checkstyleConfigDir/checkstyle.xsl")
    }
}

configure(globalModule) {
    task enhance(type: CubaEnhancing)

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
        }
    }
}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        provided(servletApi)
        jdbc(hsql)
        testRuntime(hsql)

    }

    task cleanConf(description: 'Cleans up conf directory') << {
        def dir = new File(cuba.tomcat.dir, '/conf/dashboard-core')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'dashboard-core'
        appJars('dashboard-global', 'dashboard-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbName = 'dashboard'
        dbms = 'hsql'
        host = 'localhost'
        dbName = dbNameParam
        dbUser = 'sa'
        dbPassword = ''
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbName = 'dashboard'
        dbms = 'hsql'
        host = 'localhost'
        dbName = dbNameParam
        dbUser = 'sa'
        dbPassword = ''
    }

    task startDb(description: 'Starts local HSQLDB server', type: CubaHsqlStart) {
        dbName = dbNameParam
    }

    task stopDb(description: 'Stops local HSQLDB server', type: CubaHsqlStop) {
        dbName = dbNameParam
    }

    task startTestDb(description: 'Starts local HSQLDB server', type: CubaHsqlStart) {
        dbName = dbTestNameParam
    }

    task stopTestDb(description: 'Stops local HSQLDB server', type: CubaHsqlStop) {
        dbName = dbTestNameParam
    }

    task removeDb(description: 'Removes local HSQL database', type: Delete) {
        delete new File("$rootProject.projectDir/data")
    }

    task killDb(description: 'Kill local HSQLDB server process running on port 9001', type: CubaKillProcess) {
        port = 9001
    }

    task createTestDb(dependsOn: assembleDbScripts, description: 'Creates local HSQL database', type: CubaDbCreation) {
        dbms = 'hsql'
        dbName = dbTestNameParam
        dbUser = 'sa'
        dbPassword = ''
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)

    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/haulmont/addon/dashboard/**"
        into "$cuba.tomcat.dir/conf/dashboard"
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        provided(servletApi)
        compile(guiModule)

    }

    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/haulmont/addon/dashboard/**"
        into "$cuba.tomcat.dir/conf/dashboard"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = 'dashboard'
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') << {
        def dir = new File(cuba.tomcat.dir, '/conf/dashboard')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'dashboard'
        appJars('dashboard-global', 'dashboard-gui', 'dashboard-web')
    }
    task buildScssThemes(type: CubaWebScssThemeCreation)
    task deployThemes(type: CubaDeployThemeTask, dependsOn: buildScssThemes)
    assemble.dependsOn buildScssThemes
}




configure(webThemesModule) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    appModuleType = 'web-themes'

    buildDir = file('../build/scss-themes')

    sourceSets {
        main {
            java {
                srcDir '.'
            }
            resources {
                srcDir '.'
            }
        }
    }
}


task undeploy(type: Delete, dependsOn: ':dashboard-web:cleanConf') {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/dashboard-core")
    delete("$cuba.tomcat.dir/webapps/dashboard")
}

task restart(dependsOn: ['stop', ':dashboard-core:deploy', ':dashboard-web:deploy'], description: 'Redeploys applications and restarts local Tomcat') << {
    ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
        not {
            socket(server: 'localhost', port: '8787')
        }
    }
    start.execute()
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}

apply from: 'extra.gradle'
